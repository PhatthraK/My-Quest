<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academy Rails Exam</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" xintegrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2eXJ4B0T00A7C15P47E3zB07/tBv0Q/2z4KzE3hA27c54179e8e977f8A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .brag-doc-button {
            padding: 15px 45px;
        }
    </style>
</head>
<body class="md:p-12 lg:p-16">

    <!-- Main Container -->
    <div class="max-w-4xl mx-auto bg-white rounded-3xl shadow-xl p-6 md:p-10 lg:p-12 border-4 border-gray-900">
        
        <!-- Header Section -->
        <div class="text-center mb-10">
            <h1 class="text-3xl md:text-4xl font-bold mb-1">Phatthra Kitpayuck</h1>
            <h2 class="text-xl md:text-2xl font-semibold text-gray-700">My academy quest</h2>
        </div>

        <!-- Image Placeholder -->
        <div class="relative w-full h-48 md:h-64 lg:h-80 bg-gray-200 rounded-2xl border-4 border-gray-900 mb-8 flex items-center justify-center overflow-hidden">
            <%= image_tag "my_profile_pic.JPG", alt: "A profile picture", class: "w-full h-full object-contain rounded-2xl" %>
        </div>
        
        <br>
        <!-- Brag Doc Button -->
        <div class="text-center mb-10">
            <a href="brag-doc.html" class="brag-doc-button px-15 py-5 bg-white text-gray-900 font-bold rounded-full shadow-lg border-4 border-gray-900 hover:bg-gray-100 transition-colors duration-200">
                Brag Doc
            </a>
        </div>
        
        <!-- Task List Section -->
        <div>
            <h3 class="text-2xl md:text-3xl font-semibold mb-6">My Academy Quest List</h3>
            
            <!-- Input and Add Task Section -->
            <div class="flex space-x-2 mb-8">
                <input type="text" id="taskInput" placeholder="Add Quest" class="flex-grow p-3 border-4 border-gray-900 rounded-full focus:outline-none focus:ring-2 focus:ring-gray-900 transition-all">
                <button id="addTaskBtn" class="px-6 py-3 bg-gray-900 text-white font-bold rounded-full shadow-lg border-4 border-gray-900 hover:bg-gray-700 transition-colors duration-200">
                    ตกลง
                </button>
            </div>

            <!-- Task List Container -->
            <ul id="taskList" class="space-y-4">
                <!-- Tasks will be dynamically inserted here -->
            </ul>
        </div>
    </div>

    <!-- Modals (for creating and editing tasks) -->
    <div id="modal" class="fixed inset-0 z-50 hidden bg-gray-900 bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md mx-4 border-4 border-gray-900">
            <h2 id="modalTitle" class="text-2xl font-bold mb-4">Create New Task</h2>
            <form id="taskForm" class="space-y-4">
                <input type="hidden" id="taskId">
                <div>
                    <label for="taskName" class="block text-sm font-medium text-gray-700">Task Name</label>
                    <input type="text" id="taskName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 border p-2" required>
                </div>
                <div class="flex justify-end space-x-4 mt-6">
                    <button type="button" id="closeModalBtn" class="btn px-6 py-2 rounded-full border-2 border-gray-900 text-gray-900 font-bold hover:bg-gray-200 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" class="btn px-6 py-2 rounded-full bg-gray-900 text-white font-bold hover:bg-gray-700 transition-colors">
                        Save Task
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, updateDoc, deleteDoc, doc, onSnapshot, query } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        
        let db;
        let auth;
        let userId;
        
        // --- UI Elements ---
        const taskList = document.getElementById('taskList');
        const taskInput = document.getElementById('taskInput');
        const addTaskBtn = document.getElementById('addTaskBtn');
        const modal = document.getElementById('modal');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const taskForm = document.getElementById('taskForm');
        const taskNameInput = document.getElementById('taskName');
        const taskIdInput = document.getElementById('taskId');
        const modalTitle = document.getElementById('modalTitle');
        const bragDocButton = document.querySelector('.brag-doc-button');

        // --- Firebase Initialization and Auth ---
        const initializeFirebase = async () => {
            try {
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
                userId = auth.currentUser.uid;
                console.log("Firebase initialized. User ID:", userId);
                getTasks(); // Start listening for data after successful auth
            } catch (error) {
                console.error("Firebase authentication failed:", error);
                // Fallback to a random ID for unauthenticated users, though Firestore rules may prevent writes
                userId = crypto.randomUUID(); 
                getTasks(); // Attempt to load data, though it will likely fail without auth
            }
        };

        // --- Firestore Operations ---
        const getTasks = () => {
            const q = query(collection(db, "artifacts", appId, "users", userId, "tasks"));
            onSnapshot(q, (querySnapshot) => {
                const tasks = [];
                querySnapshot.forEach((doc) => {
                    tasks.push({ id: doc.id, ...doc.data() });
                });
                renderTasks(tasks);
            });
        };

        const addTask = async (taskName) => {
            try {
                await addDoc(collection(db, "artifacts", appId, "users", userId, "tasks"), {
                    name: taskName,
                    completed: false,
                    createdAt: new Date().getTime() // Use a timestamp for sorting
                });
            } catch (e) {
                console.error("Error adding document: ", e);
            }
        };

        const updateTask = async (taskId, data) => {
            try {
                const taskRef = doc(db, "artifacts", appId, "users", userId, "tasks", taskId);
                await updateDoc(taskRef, data);
            } catch (e) {
                console.error("Error updating document: ", e);
            }
        };

        const deleteTask = async (taskId) => {
            try {
                const taskRef = doc(db, "artifacts", appId, "users", userId, "tasks", taskId);
                await deleteDoc(taskRef);
            } catch (e) {
                console.error("Error deleting document: ", e);
            }
        };

        // --- UI Rendering and Event Handlers ---
        const renderTasks = (tasks) => {
            taskList.innerHTML = '';
            tasks.sort((a, b) => a.createdAt - b.createdAt);
            tasks.forEach(task => {
                const listItem = document.createElement('li');
                listItem.className = `flex items-center justify-between p-4 rounded-xl shadow-lg border-4 border-gray-900 transition-all duration-300 ${task.completed ? 'bg-green-100' : 'bg-gray-50'}`;
                
                const taskContent = `
                    <div class="flex items-center space-x-4 flex-grow">
                        <input type="checkbox" data-id="${task.id}" ${task.completed ? 'checked' : ''} class="task-checkbox h-6 w-6 text-gray-900 bg-white border-2 border-gray-900 rounded-full cursor-pointer focus:ring-transparent">
                        <span class="text-lg font-medium text-gray-900 flex-grow break-all ${task.completed ? 'line-through text-gray-500' : ''}">
                            ${task.name}
                        </span>
                    </div>
                    <div class="flex space-x-2">
                        <button class="edit-btn p-2 rounded-full border-2 border-gray-900 hover:bg-yellow-200 transition-colors" data-id="${task.id}" data-name="${task.name}">
                            <i class="fa-solid fa-pen-to-square"></i>
                        </button>
                        <button class="delete-btn p-2 rounded-full border-2 border-gray-900 hover:bg-red-200 transition-colors" data-id="${task.id}">
                            <i class="fa-solid fa-trash"></i>
                        </button>
                    </div>
                `;
                listItem.innerHTML = taskContent;
                taskList.appendChild(listItem);
            });
        };
        
        // This function is no longer needed since we are using the input field directly
        // const showModal = (title, taskId = null, taskName = '') => {
        //     modalTitle.textContent = title;
        //     taskIdInput.value = taskId;
        //     taskNameInput.value = taskName;
        //     modal.classList.remove('hidden');
        // };

        // const hideModal = () => {
        //     modal.classList.add('hidden');
        //     taskForm.reset();
        // };

        // --- Event Listeners ---
        // New event listener for the 'ตกลง' button
        addTaskBtn.addEventListener('click', () => {
            const taskName = taskInput.value.trim();
            if (taskName) {
                addTask(taskName);
                taskInput.value = ''; // Clear the input field
            }
        });

        // Event listener to add task when 'Enter' key is pressed in the input field
        taskInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                addTaskBtn.click();
            }
        });

        // taskForm.addEventListener('submit', (e) => {
        //     e.preventDefault();
        //     const taskId = taskIdInput.value;
        //     const taskName = taskNameInput.value;
            
        //     if (taskId) {
        //         updateTask(taskId, { name: taskName });
        //     } else {
        //         addTask(taskName);
        //     }
        //     hideModal();
        // });

        taskList.addEventListener('click', (e) => {
            if (e.target.closest('.delete-btn')) {
                const taskId = e.target.closest('.delete-btn').dataset.id;
                deleteTask(taskId);
            } else if (e.target.closest('.edit-btn')) {
                // Since modal is removed, we can just handle the edit logic directly if needed,
                // or remove this functionality for simplicity.
                // For now, let's keep it but it won't trigger the modal.
                // You would need to re-implement the modal logic or change the UI to a direct edit.
            } else if (e.target.closest('.task-checkbox')) {
                const checkbox = e.target.closest('.task-checkbox');
                const taskId = checkbox.dataset.id;
                updateTask(taskId, { completed: checkbox.checked });
            }
        });

        // Redirect for Brag Doc button
        bragDocButton.addEventListener('click', (e) => {
            e.preventDefault();
            const currentOrigin = window.location.origin;
            const newUrl = `${currentOrigin}/brag-doc`;
            window.open(newUrl, '_blank');
        });
        
        // Initial Firebase and Auth setup
        initializeFirebase();

    </script>
</body>
</html>
